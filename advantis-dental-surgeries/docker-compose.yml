version: '3.9'

services:
  # ==========================
  # üóÑÔ∏è PostgreSQL Database
  # ==========================
  postgres:
    image: postgres:15
    container_name: ads-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: adsdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # ‚úÖ ADDED: Create multiple databases
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ads-network

  # ==========================
  # ü¶ì Zookeeper
  # ==========================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: ads-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 5
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - ads-network

  # ==========================
  # üêò Kafka Broker
  # ==========================
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: ads-kafka
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: ads-zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ads-kafka:9092,PLAINTEXT_INTERNAL://ads-kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 6
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - ads-network

  # ==========================
  # üîç Discovery Server (Eureka)
  # ==========================
  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    container_name: ads-discovery-server
    ports:
      - "8761:8761"
    environment:
      SPRING_APPLICATION_NAME: discovery-server
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ads-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/eureka/apps"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ==========================
  # üö™ API Gateway
  # ==========================
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: ads-api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_APPLICATION_NAME: api-gateway
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
      EUREKA_INSTANCE_HOSTNAME: ads-api-gateway
    depends_on:
      - discovery-server
      - kafka
    networks:
      - ads-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ==========================
  # üîê Auth Service
  # ==========================
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: ads-auth-service
    ports:
      - "8089:8089"
    environment:
      SPRING_APPLICATION_NAME: auth-service
      SPRING_PROFILES_ACTIVE: docker
      # ‚úÖ FIXED: Use R2DBC instead of JDBC (your auth-service uses reactive R2DBC)
      SPRING_R2DBC_URL: r2dbc:postgresql://ads-postgres:5432/authdb
      SPRING_R2DBC_USERNAME: postgres
      SPRING_R2DBC_PASSWORD: admin
      # ‚úÖ REMOVED: JPA properties (not needed for R2DBC)
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ads-kafka:9092
      SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.springframework.kafka.support.serializer.JsonSerializer
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
      EUREKA_INSTANCE_HOSTNAME: ads-auth-service
      JWT_SECRET: your_jwt_secret_key_change_in_production_12345678901234567890
      JWT_EXPIRATION_MS: "86400000"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      discovery-server:
        condition: service_started
    networks:
      - ads-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/actuator/health"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ==========================
  # üßë‚Äç‚öïÔ∏è Patient Service (8081)
  # ==========================
  patient-service:
    build:
      context: ./patient-service
      dockerfile: Dockerfile
    container_name: ads-patient-service
    ports:
      - "8081:8081"
    environment:
      SPRING_APPLICATION_NAME: patient-service
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://ads-postgres:5432/patientdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "false"
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ads-kafka:9092
      SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.springframework.kafka.support.serializer.JsonSerializer
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
      EUREKA_INSTANCE_HOSTNAME: ads-patient-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      discovery-server:
        condition: service_started
    networks:
      - ads-network
    restart: unless-stopped

# ==========================
# üì¶ Volumes and Networks
# ==========================
volumes:
  postgres_data:
  zookeeper_data:
  kafka_data:

networks:
  ads-network:
    driver: bridge